{"name": "test_signup[hello202-123]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: This user already exist.\nMessage: unexpected alert open: {Alert text : This user already exist.}\n  (Session info: chrome=110.0.5481.178)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x010B37D3]\n\t(No symbol) [0x01048B81]\n\t(No symbol) [0x00F4B36D]\n\t(No symbol) [0x00FB18E5]\n\t(No symbol) [0x00F9B216]\n\t(No symbol) [0x00F70D97]\n\t(No symbol) [0x00F7253D]\n\tGetHandleVerifier [0x0132ABF2+2510930]\n\tGetHandleVerifier [0x01358EC1+2700065]\n\tGetHandleVerifier [0x0135C86C+2714828]\n\tGetHandleVerifier [0x01163480+645344]\n\t(No symbol) [0x01050FD2]\n\t(No symbol) [0x01056C68]\n\t(No symbol) [0x01056D4B]\n\t(No symbol) [0x01060D6B]\n\tBaseThreadInitThunk [0x75B300F9+25]\n\tRtlGetAppContainerNamedObjectPath [0x76FA7BBE+286]\n\tRtlGetAppContainerNamedObjectPath [0x76FA7B8E+238]", "trace": "self = <tests.test_e2e.TestOne object at 0x00000298F8EE1B50>, username = 'hello202', password = '123'\n\n    @pytest.mark.parametrize(\"username, password\", readSignInData())\n    def test_signup(self, username, password):\n        global log\n        try:\n            log = self.getLogger()\n            homePage = HomePage(self.driver)\n            homePage.getSignupLink().click()\n            log.info(\"Clicked Signup Page\")\n            time.sleep(2)\n            homePage.getUsernameSignup().clear()\n            homePage.getUsernameSignup().send_keys(username)\n            homePage.getPasswordSignup().clear()\n            homePage.getPasswordSignup().send_keys(password)\n            homePage.getSubmitSignup().click()\n            time.sleep(2)\n>           alertmsg = homePage.getAlertSubmitSignup().text()\nE           TypeError: 'str' object is not callable\n\ntests\\test_e2e.py:30: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_e2e.TestOne object at 0x00000298F8EE1B50>, username = 'hello202', password = '123'\n\n    @pytest.mark.parametrize(\"username, password\", readSignInData())\n    def test_signup(self, username, password):\n        global log\n        try:\n            log = self.getLogger()\n            homePage = HomePage(self.driver)\n            homePage.getSignupLink().click()\n            log.info(\"Clicked Signup Page\")\n            time.sleep(2)\n            homePage.getUsernameSignup().clear()\n            homePage.getUsernameSignup().send_keys(username)\n            homePage.getPasswordSignup().clear()\n            homePage.getPasswordSignup().send_keys(password)\n            homePage.getSubmitSignup().click()\n            time.sleep(2)\n            alertmsg = homePage.getAlertSubmitSignup().text()\n            log.info(alertmsg)\n            homePage.acceptSubmitSignup()\n            time.sleep(2)\n            log.info(\"Signup Complete\")\n    \n            allure.attach(self.driver.get_screenshot_as_png(), name=\"testSignup\", attachment_type=AttachmentType.PNG)\n            # homePage.getCloseSignup().click()\n            # time.sleep(2)\n        except Exception as e:\n            log.info(e)\n            print(e)\n>           allure.attach(self.driver.get_screenshot_as_png(), name=\"testSignup\", attachment_type=AttachmentType.PNG)\n\ntests\\test_e2e.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:926: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:937: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000298F8941490>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"This user already exist.\"},\"error\":\"unexpected alert open\",\"messag...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x76FA7BBE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x76FA7B8E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: This user already exist.\nE           Message: unexpected alert open: {Alert text : This user already exist.}\nE             (Session info: chrome=110.0.5481.178)\nE           Stacktrace:\nE           Backtrace:\nE           \t(No symbol) [0x010B37D3]\nE           \t(No symbol) [0x01048B81]\nE           \t(No symbol) [0x00F4B36D]\nE           \t(No symbol) [0x00FB18E5]\nE           \t(No symbol) [0x00F9B216]\nE           \t(No symbol) [0x00F70D97]\nE           \t(No symbol) [0x00F7253D]\nE           \tGetHandleVerifier [0x0132ABF2+2510930]\nE           \tGetHandleVerifier [0x01358EC1+2700065]\nE           \tGetHandleVerifier [0x0135C86C+2714828]\nE           \tGetHandleVerifier [0x01163480+645344]\nE           \t(No symbol) [0x01050FD2]\nE           \t(No symbol) [0x01056C68]\nE           \t(No symbol) [0x01056D4B]\nE           \t(No symbol) [0x01060D6B]\nE           \tBaseThreadInitThunk [0x75B300F9+25]\nE           \tRtlGetAppContainerNamedObjectPath [0x76FA7BBE+286]\nE           \tRtlGetAppContainerNamedObjectPath [0x76FA7B8E+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:244: UnexpectedAlertPresentException"}, "attachments": [{"name": "log", "source": "ce4f48f3-deb1-42eb-8613-c44649fdc48b-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "e0b111d7-2b53-4fd4-b244-51b438917f99-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "username", "value": "'hello202'"}, {"name": "password", "value": "'123'"}], "start": 1678426349224, "stop": 1678426353771, "uuid": "d18317ee-7588-4bc2-a908-d2b1c8d056fc", "historyId": "3c2d972bffc0f20d4afb7ee740a84ae9", "testCaseId": "5503b5b7b6457e3f426d21b68d422458", "fullName": "tests.test_e2e.TestOne#test_signup", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_e2e"}, {"name": "subSuite", "value": "TestOne"}, {"name": "host", "value": "USBLRGRAVEE1"}, {"name": "thread", "value": "20040-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_e2e"}]}